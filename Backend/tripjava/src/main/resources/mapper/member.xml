<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.tripjava.tripjava.member.model.mapper.MemberMapper">
    <resultMap type="memberDto" id="member">
        <result column="id" property="id"/>
        <result column="password" property="password"/>
        <result column="user_name" property="userName"/>
        <result column="birthday" property="birthday"/>
        <result column="gender" property="gender"/>
        <result column="login_type" property="loginType"/>
        <result column="member_type" property="memberType"/>
        <result column="role" property="role"/>
        <result column="token" property="token"/>
    </resultMap>

    <select id="login" parameterType="map" resultMap="member">
        select id, user_name, token
        from members
        where id = #{userId} and password = #{userPwd}
    </select>

    <select id="userInfo" parameterType="string" resultMap="member">
        select id, password, user_name, birthday, gender, login_type, member_type, role
        from members
        where id = #{userId}
    </select>

    <update id="saveRefreshToken" parameterType="map">
        update members
        set token = #{token}
        where id = #{userId}
    </update>

    <select id="getRefreshToken" parameterType="string" resultType="string">
        select token
        from members
        where id = #{userId}
    </select>

    <update id="deleteRefreshToken" parameterType="map">
        update members
        set token = #{token, jdbcType=VARCHAR}
        where id = #{userId}
    </update>

    <select id="findByEmail" parameterType="string" resultMap="member">
        select id, password, user_name, birthday, gender, login_type, member_type, role, token
        from members
        where id = #{email}
    </select>

    <select id="findByUsername" parameterType="string" resultMap="member">
        select id, password, user_name, birthday, gender, login_type, member_type, role, token
        from members
        where user_name = #{userName}
    </select>

    <insert id="join" parameterType="member">
        insert into members (id, password, user_name, birthday, gender, image)
        values (#{id}, #{password}, #{userName}, #{birthday}, #{gender}, #{image})
    </insert>

    <update id="updateMember" parameterType="memberDto">
        update members
        <trim prefix="set" suffixOverrides=",">
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="image != null">image = #{image},</if>
            <if test="memberType != null">member_type = #{memberType},</if>
            <if test="role != null"> role = #{role},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteMember" parameterType="String">
        delete from members
        where id = #{id}
    </delete>

</mapper>